(define-constant CONTRACT_OWNER tx-sender)
(define-constant ERR_NOT_AUTHORIZED (err u100))
(define-constant ERR_CAMPAIGN_NOT_FOUND (err u101))
(define-constant ERR_INSUFFICIENT_FUNDS (err u102))
(define-constant ERR_VOTE_NOT_APPROVED (err u103))
(define-constant ERR_INVALID_AMOUNT (err u104))
(define-constant ERR_ALREADY_LOCKED (err u105))
(define-constant ERR_NOT_LOCKED (err u106))
(define-constant ERR_INVALID_CAMPAIGN_ID (err u107))
(define-constant ERR_INVALID_PROPOSAL_ID (err u108))
(define-constant ERR_RELEASE_FAILED (err u109))
(define-constant ERR_DEPOSIT_FAILED (err u110))
(define-constant ERR_WITHDRAW_FAILED (err u111))
(define-constant ERR_UPDATE_FAILED (err u112))
(define-constant ERR_INVALID_RECIPIENT (err u113))
(define-constant ERR_MAX_CAMPAIGNS_EXCEEDED (err u114))
(define-constant ERR_INVALID_TIMESTAMP (err u115))
(define-constant ERR_AUTHORITY_NOT_SET (err u116))
(define-constant ERR_INVALID_MIN_RELEASE (err u117))
(define-constant ERR_INVALID_MAX_RELEASE (err u118))
(define-constant ERR_INVALID_FEE_RATE (err u119))
(define-constant ERR_FEE_TRANSFER_FAILED (err u120))

(define-data-var total-funds uint u0)
(define-data-var max-campaigns uint u500)
(define-data-var min-release-amount uint u100)
(define-data-var max-release-amount uint u1000000)
(define-data-var platform-fee-rate uint u5)
(define-data-var authority-principal principal tx-sender)
(define-data-var next-campaign-id uint u0)

(define-map CampaignFunds
  { campaign-id: uint }
  { balance: uint, locked: bool, timestamp: uint, recipient: principal }
)

(define-map ApprovedReleases
  { campaign-id: uint, proposal-id: uint }
  { amount: uint, approved: bool, releaser: principal }
)

(define-map CampaignMetadata
  { campaign-id: uint }
  { name: (string-utf8 100), description: (string-utf8 500), goal: uint }
)

(define-read-only (get-total-funds)
  (ok (var-get total-funds))
)

(define-read-only (get-campaign-funds (campaign-id uint))
  (map-get? CampaignFunds { campaign-id: campaign-id })
)

(define-read-only (get-approved-release (campaign-id uint) (proposal-id uint))
  (map-get? ApprovedReleases { campaign-id: campaign-id, proposal-id: proposal-id })
)

(define-read-only (get-campaign-metadata (campaign-id uint))
  (map-get? CampaignMetadata { campaign-id: campaign-id })
)

(define-private (validate-amount (amount uint))
  (if (> amount u0)
      (ok true)
      ERR_INVALID_AMOUNT)
)

(define-private (validate-campaign-id (id uint))
  (if (< id (var-get next-campaign-id))
      (ok true)
      ERR_INVALID_CAMPAIGN_ID)
)

(define-private (validate-proposal-id (id uint))
  (if (> id u0)
      (ok true)
      ERR_INVALID_PROPOSAL_ID)
)

(define-private (validate-recipient (recipient principal))
  (if (not (is-eq recipient CONTRACT_OWNER))
      (ok true)
      ERR_INVALID_RECIPIENT)
)

(define-private (validate-timestamp (ts uint))
  (if (>= ts block-height)
      (ok true)
      ERR_INVALID_TIMESTAMP)
)

(define-private (is-authorized (caller principal))
  (if (or (is-eq caller CONTRACT_OWNER) (is-eq caller (var-get authority-principal)))
      (ok true)
      ERR_NOT_AUTHORIZED)
)

(define-public (set-authority-principal (new-authority principal))
  (begin
    (try! (is-authorized tx-sender))
    (try! (validate-recipient new-authority))
    (var-set authority-principal new-authority)
    (ok true)
  )
)

(define-public (set-max-campaigns (new-max uint))
  (begin
    (try! (is-authorized tx-sender))
    (asserts! (> new-max u0) ERR_INVALID_AMOUNT)
    (var-set max-campaigns new-max)
    (ok true)
  )
)

(define-public (set-min-release-amount (new-min uint))
  (begin
    (try! (is-authorized tx-sender))
    (try! (validate-amount new-min))
    (var-set min-release-amount new-min)
    (ok true)
  )
)

(define-public (set-max-release-amount (new-max uint))
  (begin
    (try! (is-authorized tx-sender))
    (try! (validate-amount new-max))
    (var-set max-release-amount new-max)
    (ok true)
  )
)

(define-public (set-platform-fee-rate (new-rate uint))
  (begin
    (try! (is-authorized tx-sender))
    (asserts! (and (>= new-rate u0) (<= new-rate u10)) ERR_INVALID_FEE_RATE)
    (var-set platform-fee-rate new-rate)
    (ok true)
  )
)

(define-public (create-campaign (name (string-utf8 100)) (description (string-utf8 500)) (goal uint) (recipient principal))
  (let ((campaign-id (var-get next-campaign-id)))
    (try! (validate-amount goal))
    (try! (validate-recipient recipient))
    (asserts! (< campaign-id (var-get max-campaigns)) ERR_MAX_CAMPAIGNS_EXCEEDED)
    (map-set CampaignFunds { campaign-id: campaign-id } { balance: u0, locked: false, timestamp: block-height, recipient: recipient })
    (map-set CampaignMetadata { campaign-id: campaign-id } { name: name, description: description, goal: goal })
    (var-set next-campaign-id (+ campaign-id u1))
    (print { event: "campaign-created", id: campaign-id })
    (ok campaign-id)
  )
)

(define-public (deposit-funds (campaign-id uint) (amount uint))
  (let ((funds (unwrap! (map-get? CampaignFunds { campaign-id: campaign-id }) ERR_CAMPAIGN_NOT_FOUND)))
    (try! (validate-amount amount))
    (try! (validate-campaign-id campaign-id))
    (asserts! (not (get locked funds)) ERR_ALREADY_LOCKED)
    (try! (stx-transfer? amount tx-sender (as-contract tx-sender)))
    (let ((new-balance (+ (get balance funds) amount)))
      (map-set CampaignFunds { campaign-id: campaign-id } { balance: new-balance, locked: (get locked funds), timestamp: block-height, recipient: (get recipient funds) })
      (var-set total-funds (+ (var-get total-funds) amount))
      (print { event: "funds-deposited", campaign-id: campaign-id, amount: amount })
      (ok new-balance)
    )
  )
)

(define-public (approve-release (campaign-id uint) (proposal-id uint) (amount uint))
  (let ((funds (unwrap! (map-get? CampaignFunds { campaign-id: campaign-id }) ERR_CAMPAIGN_NOT_FOUND)))
    (try! (is-authorized tx-sender))
    (try! (validate-amount amount))
    (try! (validate-campaign-id campaign-id))
    (try! (validate-proposal-id proposal-id))
    (asserts! (>= (get balance funds) amount) ERR_INSUFFICIENT_FUNDS)
    (asserts! (>= amount (var-get min-release-amount)) ERR_INVALID_MIN_RELEASE)
    (asserts! (<= amount (var-get max-release-amount)) ERR_INVALID_MAX_RELEASE)
    (map-set ApprovedReleases { campaign-id: campaign-id, proposal-id: proposal-id } { amount: amount, approved: true, releaser: tx-sender })
    (print { event: "release-approved", campaign-id: campaign-id, proposal-id: proposal-id, amount: amount })
    (ok true)
  )
)

(define-public (release-funds (campaign-id uint) (proposal-id uint))
  (let ((funds (unwrap! (map-get? CampaignFunds { campaign-id: campaign-id }) ERR_CAMPAIGN_NOT_FOUND))
        (release (unwrap! (map-get? ApprovedReleases { campaign-id: campaign-id, proposal-id: proposal-id }) ERR_VOTE_NOT_APPROVED)))
    (try! (validate-campaign-id campaign-id))
    (try! (validate-proposal-id proposal-id))
    (asserts! (get approved release) ERR_VOTE_NOT_APPROVED)
    (asserts! (>= (get balance funds) (get amount release)) ERR_INSUFFICIENT_FUNDS)
    (let ((fee (* (get amount release) (var-get platform-fee-rate) (/ u100))))
      (try! (as-contract (stx-transfer? fee tx-sender (var-get authority-principal))))
      (let ((net-amount (- (get amount release) fee)))
        (try! (as-contract (stx-transfer? net-amount tx-sender (get recipient funds))))
        (let ((new-balance (- (get balance funds) (get amount release))))
          (map-set CampaignFunds { campaign-id: campaign-id } { balance: new-balance, locked: true, timestamp: block-height, recipient: (get recipient funds) })
          (var-set total-funds (- (var-get total-funds) (get amount release)))
          (print { event: "funds-released", campaign-id: campaign-id, proposal-id: proposal-id, amount: net-amount })
          (ok net-amount)
        )
      )
    )
  )
)

(define-public (lock-campaign (campaign-id uint))
  (let ((funds (unwrap! (map-get? CampaignFunds { campaign-id: campaign-id }) ERR_CAMPAIGN_NOT_FOUND)))
    (try! (is-authorized tx-sender))
    (try! (validate-campaign-id campaign-id))
    (asserts! (not (get locked funds)) ERR_ALREADY_LOCKED)
    (map-set CampaignFunds { campaign-id: campaign-id } { balance: (get balance funds), locked: true, timestamp: block-height, recipient: (get recipient funds) })
    (print { event: "campaign-locked", campaign-id: campaign-id })
    (ok true)
  )
)

(define-public (unlock-campaign (campaign-id uint))
  (let ((funds (unwrap! (map-get? CampaignFunds { campaign-id: campaign-id }) ERR_CAMPAIGN_NOT_FOUND)))
    (try! (is-authorized tx-sender))
    (try! (validate-campaign-id campaign-id))
    (asserts! (get locked funds) ERR_NOT_LOCKED)
    (map-set CampaignFunds { campaign-id: campaign-id } { balance: (get balance funds), locked: false, timestamp: block-height, recipient: (get recipient funds) })
    (print { event: "campaign-unlocked", campaign-id: campaign-id })
    (ok true)
  )
)

(define-public (update-campaign-metadata (campaign-id uint) (new-name (string-utf8 100)) (new-description (string-utf8 500)) (new-goal uint))
  (let ((metadata (unwrap! (map-get? CampaignMetadata { campaign-id: campaign-id }) ERR_CAMPAIGN_NOT_FOUND)))
    (try! (is-authorized tx-sender))
    (try! (validate-campaign-id campaign-id))
    (try! (validate-amount new-goal))
    (map-set CampaignMetadata { campaign-id: campaign-id } { name: new-name, description: new-description, goal: new-goal })
    (print { event: "metadata-updated", campaign-id: campaign-id })
    (ok true)
  )
)

(define-public (withdraw-emergency (campaign-id uint) (amount uint))
  (let ((funds (unwrap! (map-get? CampaignFunds { campaign-id: campaign-id }) ERR_CAMPAIGN_NOT_FOUND)))
    (try! (is-authorized tx-sender))
    (try! (validate-amount amount))
    (try! (validate-campaign-id campaign-id))
    (asserts! (>= (get balance funds) amount) ERR_INSUFFICIENT_FUNDS)
    (try! (as-contract (stx-transfer? amount tx-sender CONTRACT_OWNER)))
    (let ((new-balance (- (get balance funds) amount)))
      (map-set CampaignFunds { campaign-id: campaign-id } { balance: new-balance, locked: (get locked funds), timestamp: block-height, recipient: (get recipient funds) })
      (var-set total-funds (- (var-get total-funds) amount))
      (print { event: "emergency-withdraw", campaign-id: campaign-id, amount: amount })
      (ok new-balance)
    )
  )
)